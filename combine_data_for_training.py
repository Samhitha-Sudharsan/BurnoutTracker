import pandas as pd
import numpy as np

# --- Configuration ---
CLEANED_DATA_FILE = 'cleaned_data.csv'         # Your real app data
SYNTHETIC_DATA_FILE = 'model_training_data.csv' # The synthetic data for training
FINAL_TRAINING_DATA_FILE = 'final_combined_training_data.csv' # Output file for combined data

print("Starting data combination for model training...")

# 1. Load your actual cleaned_data.csv
try:
    df_real = pd.read_csv(CLEANED_DATA_FILE)
    print(f"Loaded {len(df_real)} rows from {CLEANED_DATA_FILE}")
    
    # Ensure 'date' column is datetime
    df_real['date'] = pd.to_datetime(df_real['date'])

    # Add a unique user_id for your real user's data
    df_real['user_id'] = 'real_user_000' 
    
    # Define the expected columns for the real data, based on your app's structure
    # This list should match the columns generated by your daily log form, PLUS 'major_event_log'
    # which we added in the synthetic data (and your app's load_data assumes if it's the latest version)
    expected_real_cols = [
        'date', 'age', 'mood', 'anxiety', 'energy', 'burnout', 'journal_entry',
        'sleep', 'refreshed_after_sleep',
        'steps_taken', 'water_intake', 'caffeine_intake',
        'work_hours', 'outfit_type',
        'music_genre', 'music_volume', 'music_time',
        'on_period_today', 'cycle_phase', 'symptoms_experienced',
        'major_event_log' # Ensure this matches what your app would save
    ]

    # Reorder/select columns and handle potential missing ones in real data
    # (e.g., if 'major_event_log' was added later to your app)
    for col in expected_real_cols:
        if col not in df_real.columns:
            df_real[col] = np.nan # Add as NaN if not present, will be handled during ML preprocessing
    
    # Select and reorder columns for real data to match the synthetic data's expected order
    # (user_id will be handled specifically)
    df_real_for_concat = df_real[['date', 'user_id'] + [col for col in expected_real_cols if col != 'date']]


except FileNotFoundError:
    print(f"Error: {CLEANED_DATA_FILE} not found. Please ensure it exists and has your 108 rows.")
    exit() # Exit if the real data isn't found

# 2. Load the synthetic training data
try:
    df_synthetic = pd.read_csv(SYNTHETIC_DATA_FILE)
    print(f"Loaded {len(df_synthetic)} rows from {SYNTHETIC_DATA_FILE}")
    
    # Ensure 'date' column is datetime
    df_synthetic['date'] = pd.to_datetime(df_synthetic['date'])

except FileNotFoundError:
    print(f"Error: {SYNTHETIC_DATA_FILE} not found. Please run generate_training_data.py first.")
    exit()

# 3. Concatenate the two DataFrames
# Ensure both dataframes have the exact same columns before concatenation.
# We'll use the columns from the synthetic data as the reference, as it's more comprehensive.
common_columns = list(df_synthetic.columns) # Use synthetic columns as master list

# Add any missing columns to df_real_for_concat that are in df_synthetic (e.g., user_id handled, but others?)
for col in common_columns:
    if col not in df_real_for_concat.columns:
        df_real_for_concat[col] = np.nan # Fill with NaN for missing columns

# Filter df_real_for_concat to only include common columns in the correct order
df_real_for_concat = df_real_for_concat[common_columns]


final_training_df = pd.concat([df_real_for_concat, df_synthetic], ignore_index=True)

print(f"\nSuccessfully combined data. Total rows for training: {len(final_training_df)}")

# 4. Save the combined DataFrame
final_training_df.to_csv(FINAL_TRAINING_DATA_FILE, index=False)

print(f"Combined training data saved to {FINAL_TRAINING_DATA_FILE}")
print("\nFirst 5 rows of the combined training data:")
print(final_training_df.head())
print("\nLast 5 rows of the combined training data:")
print(final_training_df.tail())
print(f"\nUnique user_ids in combined data: {final_training_df['user_id'].nunique()}")
print(f"Distribution of ages (top 10 values): \n{final_training_df['age'].value_counts().head(10)}")